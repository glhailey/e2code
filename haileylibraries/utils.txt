@name utils
if(first()|duped()|dupefinished())
{
    # Compilation of useful helper functions

    function findClipToNGABox(BOXPOSITION:vector,BOXSIZE:vector,BOXANGLE:angle){
        local RIGHT = BOXANGLE:right()
        local UP = BOXANGLE:up()
        local FORWARD = BOXANGLE:forward()
        BOXSIZE=BOXSIZE/2

        #holoCreate(1001,BOXPOSITION+BOXSIZE:x()*FORWARD)
        #holoCreate(1002,BOXPOSITION+BOXSIZE:y()*RIGHT)
        #holoCreate(1003,BOXPOSITION+BOXSIZE:z()*UP)

        findClipToRegion(BOXPOSITION+BOXSIZE:x()*FORWARD,-FORWARD)
        findClipToRegion(BOXPOSITION-BOXSIZE:x()*FORWARD,FORWARD)

        findClipToRegion(BOXPOSITION+BOXSIZE:y()*RIGHT,-RIGHT)
        findClipToRegion(BOXPOSITION-BOXSIZE:y()*RIGHT,RIGHT)

        findClipToRegion(BOXPOSITION+BOXSIZE:z()*UP,-UP)
        findClipToRegion(BOXPOSITION-BOXSIZE:z()*UP,UP)
    }

    #*********************************************************************************************************************************
    function array array:removeEntity(Entity:entity){
        local Output = array()
        local C = 1
        foreach(K,E:entity = This){
            if(E!=Entity){
                Output[C,entity]=E
                C++
            }
        }
        return Output
    }
    function number array:containsEntity(Entity:entity){
        foreach(K,E:entity = This){
            if(E==Entity){
                return K
            }
        }
        return 0
    }

    #*********************************************************************************************************************************
    function number evaluateSimpleExpression(Expression:string)
    {
        while(1){
            local Text = Expression:matchFirst("[0-9\\.]+[\\^][0-9\\.]+")
            if(Text!=""){
                local Matches = Expression:match("([0-9\\.]+)[\\^]([0-9\\.]+)")
                local Exploded = Expression:explode(Text)
                local Evaluated = Matches[1,string]:toNumber() ^ Matches[2,string]:toNumber()
                Expression = format("%s%f%s",Exploded[1,string],Evaluated,Exploded[2,string])
            }
            else
            {
                break
            }
        }
        while(1){
            local Text = Expression:matchFirst("[0-9\\.]+[/*][0-9\\.]+")
            if(Text!=""){
                local Matches = Expression:match("([0-9\\.]+)([/\\*])([0-9\\.]+)")
                local Exploded = Expression:explode(Text)
                local Evaluated = (Matches[2,string]=="/")? (Matches[1,string]:toNumber() / Matches[3,string]:toNumber()) : (Matches[1,string]:toNumber() * Matches[3,string]:toNumber())
                #print(Evaluated)
                Expression = format("%s%f%s",Exploded[1,string],Evaluated,Exploded[2,string])
            }
            else
            {
                break
            }
        }
        while(1){
            local Text = Expression:matchFirst("[0-9\\.]+[+-][0-9\\.]+")
            if(Text!=""){
                local Matches = Expression:match("([0-9\\.]+)([+-])([0-9\\.]+)")
                local Exploded = Expression:explode(Text)
                local Evaluated = (Matches[2,string]=="-")? (Matches[1,string]:toNumber() - Matches[3,string]:toNumber()) : (Matches[1,string]:toNumber() + Matches[3,string]:toNumber())
                Expression = format("%s%f%s",Exploded[1,string],Evaluated,Exploded[2,string])
            }
            else
            {
                break
            }
        }

        return Expression:toNumber()
    }

    function number evaluateExpression(Expression:string)
    {
        Expression = Expression:explodeRE(" +"):concat()
        while(1){
            #print(Expression)
            local Text = Expression:matchFirst("[\\(]([^\\)\\(]*)[\\)]")
            if(Text!=""){
                local Exploded = Expression:explode(format("(%s)",Text))
                local Evaluated = evaluateSimpleExpression(Text)
                Expression = format("%s%f%s",Exploded[1,string],Evaluated,Exploded[2,string])
            }
            else
            {
                break
            }
        }
        return evaluateSimpleExpression(Expression)
    }
    #*********************************************************************************************************************************

    #*********************************************************************************************************************************
    function string formatCommas(Number:number){
        local NumString = Number:toString()
        local Negative = NumString:matchFirst("-?")
        local NonFraction = NumString:matchFirst("%d+"):reverse()
        local Fraction = NumString:matchFirst("%.%d+")
        local NumArray = array()
        local Sub = NonFraction:matchFirst("%d%d%d")
        local I = 0
        local Count = 1

        local Triplets = NonFraction:gmatch("%d%d%d")
       #printTable(Triplets)
        for(I=1,Triplets:count()){
            NumArray[I,string] = Triplets[I,array][1,string]
        }
        local Final = NonFraction:matchFirst("%d+",Triplets:count()*3+1)
        if(Final){
            NumArray[Triplets:count()+1,string] = Final
        }

#        while(Sub & Sub!=" "){
#            NumArray[Count,string] = Sub
#            I+=3
#            Count++
#            Sub = NonFraction:matchFirst("%d%d%d",I)
#            print(Sub)
#        }
        #NumArray[Count,string] =
       #print(Fraction)
       #print(NumString:reverse():match("(%d%d%d)"):concat(","))
        return format("%s%s%s",Negative,NumArray:concat(","):reverse(),Fraction)
    }

    #*********************************************************************************************************************************

    #*********************************************************************************************************************************

    function number compare(N1,N2){
        return (N1>N2)-(N1<N2) # If n1 < n2 return -1, if n1 > n2 return 1, if equal return 0
    }

    function number compareTable(Table1:table,Table2:table){
        return compare(Table1["i",number],Table2["i",number])
    }

    function table selectionSortTable(Input:table){
        local I = 2
        local Count = Input:count()
        if(Count<=1){
            return Input
        }
        local Temp = table()
        while(I < Count+1){
            #print("Next")
            #print("I = " + I)
            local J = I
            while(compareTable(Input[J-1,table],Input[J,table])==1 & J>1){
                Temp=Input[J-1,table]
                Input[J-1,table]=Input[J,table]
                Input[J,table]=Temp
                J--
            }
            I++
            #printTable(Input)

        }
        return Input
    }

    function table mergesortTable(Input:table,Start,End){
        if(End-Start<6){
            #print("Unsorted: ",Start,End)
            local Table = table()
            local C = 1
            for(I=Start,End){
                Table[C,table] = Input[I,table]
                C++
            }
            #printTable(Table)
            #print("Sorted:")
            #printTable(Sort)
            return selectionSortTable(Table)
        }
        else
        {
            local Middle = Start+floor((End-Start)/2)
            #print(format("split from %d to %d and %d to %d",Start,Middle,Middle+1,End))
            local Table1 = mergesortTable(Input,Start,Middle)
            local Table2 = mergesortTable(Input,Middle+1,End)


            local P = 1
            local Q = 1
            local PM = Table1:count()
            local QM = Table2:count()
            #print(format("PM = %d, QM = %d",PM,QM))
            local Table = table()
            local C = 1
            while(P<=PM & Q<=QM){
                if(compareTable(Table1[P,table],Table2[Q,table]) == -1){
                    Table[C,table] = Table1[P,table]
                    #print("Add P: ",P,Table1[P,table]["i",number],"\n NewP:",P+1)
                    P++
                }
                else{
                    Table[C,table] = Table2[Q,table]
                    #print("Add Q: ",Table2[Q,table]["i",number],Q)

                    Q++
                }
                C++
            }
            #print(P,PM,Q,QM)
            if(P<=PM){
                #print("P+")
                for(I=P,PM){
                    Table[C,table] = Table1[I,table]
                    C++
                }
            }
            elseif(Q<=QM){
                #print("Q+")
                for(I=Q,QM){
                    Table[C,table] = Table2[I,table]
                    C++
                }
            }
            #print("Merged:")
            #printTable(Table)
            #error("1")
            return Table
        }
    }

    function table mergesortTable(Input:table){
        return mergesortTable(Input,1,Input:count())
    }

    function table mergeTable(Table1:table,Table2:table)
    {
        local P = 1
        local Q = 1
        local PM = Table1:count()
        local QM = Table2:count()
        local Table = table()
        local C = 1
        while(P<=PM & Q<=QM){
            if(compareTable(Table1[P,table],Table2[Q,table]) == -1){
                Table[C,table] = Table1[P,table]
                P++
            }
            else{
                Table[C,table] = Table2[Q,table]
                Q++
            }
            C++
        }
        if(P<=PM){
            for(I=P,PM){
                Table[C,table] = Table1[I,table]
                C++
            }
        }
        elseif(Q<=QM){
            for(I=Q,QM){
                Table[C,table] = Table2[I,table]
                C++
            }
        }
        return Table
    }

    function number isSorted(Table:table){
        if(Table:count() <= 1){
            return 1
        }
        for(I=2,Table:count()){
            if(compareTable(Table[I-1,table],Table[I,table])==1){
                return 0
            }
        }
        return 1
    }

    #*********************************************************************************************************************************

    function array tableAsStringArray(Table:table,Depth,SpacesString:string,MaxSize){

        local Types = Table:typeids()
        local TypesArray = Table:typeidsArray()
        local Array = array()
        local C = 1
        local NextSpacesString = SpacesString+"        "
        foreach(K,Type:string = Types){

            #print(format(FormatString,K,Table[K,number]))
            switch(Type)
            {
                case "e",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,entity]):concat()
                    C++
                break
                case "b",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,bone]):concat()
                    C++
                break
                case "n",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,number]):concat()
                    C++
                break
                case "s",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,string]):concat()
                    C++
                break
                case "v",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,vector]):concat()
                    C++
                break
                case "a",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,vector]):concat()
                    C++
                break
                case "xv2",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,vector2]):concat()
                    C++
                break
                case "xv4",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,vector4]):concat()
                    C++
                break
                case "xwl",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,wirelink]):concat()
                    C++
                break
                case "q",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,quaternion]):concat()
                    C++
                break
                case "c",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,complex]):concat()
                    C++
                break
                case "xwl",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,wirelink]):concat()
                    C++
                break
                case "xrd",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,ranger]):concat()
                    C++
                break
                case "xef",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,effect]):concat()
                    C++
                break
                case "m",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,matrix]):concat()
                    C++
                break
                case "xm2",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,matrix2]):concat()
                    C++
                break
                case "xm4",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,matrix4]):concat()
                    C++
                break


                case "r",
                    Array[C,string] = array(SpacesString,"\"",K,"\" = ",Table[K,array]):concat()
                    C++
                break
                case "t",
                    #Array[C,string] = format(FormatString,K,)
                    if(Depth){

                        local Array2 = tableAsStringArray(Table[K,table],Depth-1,NextSpacesString,MaxSize-C)

                        Array[C,string] = array(SpacesString,"\"",K,"\" = table: "):concat()
                        C+= Array2:count()+1
                        Array = Array:add(Array2)
                    }
                    else
                    {
                        Array[C,string] = array(SpacesString,"\"",K,"\" = table: "):concat()
                        C++
                    }
                break
            }

        }
        if(TypesArray:count()){
            for(K=1,min(TypesArray:count(),MaxSize-C)){
                #opCountStart()
                switch(TypesArray[K,string])
                {
                    case "e",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,entity]):concat()
                        C++
                    break
                    case "b",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,bone]):concat()
                        C++
                    break
                    case "n",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,number]):concat()
                        C++
                    break
                    case "s",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,string]):concat()
                        C++
                    break
                    case "v",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,vector]):concat()
                        C++
                    break
                    case "a",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,vector]):concat()
                        C++
                    break
                    case "xv2",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,vector2]):concat()
                        C++
                    break
                    case "xv4",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,vector4]):concat()
                        C++
                    break
                    case "xwl",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,wirelink]):concat()
                        C++
                    break
                    case "q",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,quaternion]):concat()
                        C++
                    break
                    case "c",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,complex]):concat()
                        C++
                    break
                    case "xwl",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,wirelink]):concat()
                        C++
                    break
                    case "xrd",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,ranger]):concat()
                        C++
                    break
                    case "xef",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,effect]):concat()
                        C++
                    break
                    case "m",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,matrix]):concat()
                        C++
                    break
                    case "xm2",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,matrix2]):concat()
                        C++
                    break
                    case "xm4",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,matrix4]):concat()
                        C++
                    break


                    case "r",
                        Array[C,string] = array(SpacesString,K," = ",Table[K,array]):concat()
                        C++
                    break
                    case "t",
                        #Array[C,string] = format(FormatString,K,)
                        if(Depth){
                            local M = maxquota()
                            local Array2 = tableAsStringArray(Table[K,table],Depth-1,NextSpacesString,MaxSize-C)
                            print("A",M-maxquota())
                            M = maxquota()
                            Array[C,string] = array(SpacesString,K," = table: "):concat()
                            C+= Array2:count()+1
                            Array = Array:add(Array2)
                            print("B",M-maxquota())
                        }
                        else
                        {
                            Array[C,string] = array(SpacesString,K," = table: ... "):concat()
                            C++
                        }
                    break
                }
                #opCountEnd("One")
            }

        }

        return Array
    }

    function void printTableThourough(Table:table,Depth,DepthSpaces,MaxSize){
        #local Keys = Table:keys()
        local Array = tableAsStringArray(Table,Depth," ":repeat(DepthSpaces*8),MaxSize)
        local Total = Array:count()
        local MaxNormal = floor(Total/10)*10
        local PrintArray = array()
        for(I = 1,MaxNormal,10)
        {
            #opCountStart()
            local C = 1
            for(J = I, I+9){
                PrintArray[C,string] = Array[J,string]
                C++
            }
            print(PrintArray:concat("\n"))
            #opCountEnd("print")
        }
        local FinalArray = array()
        local C = 1
        for(I=MaxNormal+1,Total){
            FinalArray[C,string] = Array[I,string]
            C++
        }
        print(FinalArray:concat("\n"))
    }

    function void printTableThourough(Table:table,Depth,DepthSpaces){
        printTableThourough(Table,Depth,DepthSpaces,50)
    }

    function void printTableThourough(Table:table,Depth){
        printTableThourough(Table,Depth,0)
    }
    function void printTableThourough(Table:table){
        printTableThourough(Table,1,0)
    }
    #*********************************************************************************************************************************
}

if((first()|duped()|dupefinished()) & entity():getName()=="utils")
{
    print(format("Commas: %d -> %s",12345678,formatCommas(12345678)))
    print(format("Commas: %d -> %s",-12345678,formatCommas(-12345678)))
    print(format("Commas: %d -> %s",-12345678.10302,formatCommas(-12345678.10302)))
    print(format("Commas: %d -> %s\n",12345678.10302,formatCommas(12345678.10302)))

    print(format("Compare %d , %d = %d",1,5,compare(1,5)))
    print(format("Compare %d , %d = %d",17,1,compare(17,1)))
    print(format("Compare %d , %d = %d\n",100,100,compare(100,100)))

    print(format("EvaluateExpression %s = %f","1+2/3-4*5",evaluateExpression("1+2/3-4*5")))
    print(format("EvaluateExpression %s = %f","(1+2)/3-(4*5)",evaluateExpression("(1+2)/3-(4*5)")))
    print(format("EvaluateExpression %s = %f","((1+2)/3-(4*5))*10",evaluateExpression("((1+2)/3-(4*5))*10")))
    print(format("EvaluateExpression %s = %f","((1+2)^3-(4*5))*10",evaluateExpression("((1+2)^3-(4*5))*10")))



    local Random = table(table("i"=10),table("i"=2),table("i"=19),table("i"=12),table("i"=16),table("i"=5),table("i"=4),table("i"=18),table("i"=13),table("i"=6),table("i"=17),table("i"=8),table("i"=3),table("i"=11),table("i"=7),table("i"=14),table("i"=1),table("i"=9),table("i"=15))
    print("RandomTable = ")
    printTable(Random)

    function number compareTable(Table1:table, Table2:table){
         return compare(Table1["i",number],Table2["i",number])
    }
    local Start = maxquota()
    print("SortedTable = ")
    local Sorted = mergesortTable(Random)
    printTable(Sorted)
    print(Start-maxquota())
    #printTableThourough(Sorted,1)
}
